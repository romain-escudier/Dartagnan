#!/bin/bash
<HEADER>

# Get parameters and useful functions
. <CURRENTDIR>/parameters
. <CURRENTDIR>/functions.sh

set -ex

# Get values of cycle and job id
this_cycle=<CYCLE>
this_cycle=$(str2num $this_cycle)
disp_cycle=<DISPCYCLE>
NCORES=<NCORES>

# Go to the root directory of the simulation (SCRATCHDIR)
cd ${SCRATCHDIR}

# Only apply filter after a few days (defined in parameter: NSTART_ANA)
if (( ${this_cycle} > $((${NSTART_ANA}-1)) )) ; then

#------------------------------------------------------------------------------------
# Load the appropriate modules (from module-used)
#------------------------------------------------------------------------------------

   sed '1d' ${SCRATCHDIR}/modules-used > ${SCRATCHDIR}/Tempfiles/modules.dat
   list=$( cat ${SCRATCHDIR}/Tempfiles/modules.dat | sed -e "s/[0-9])//g" )
   module purge
   for mod in $list ; do
       module load $mod
   done
   rm ${SCRATCHDIR}/Tempfiles/modules.dat
   module load parallel nco

#------------------------------------------------------------------------------------
# Prepare the namelists
#------------------------------------------------------------------------------------

   ### Get dates
   # for this cycle
   date_cycle=$(get_date_from_cycle $(( ${this_cycle} -1 )) $STARTDATE $DT_ANA)
   # For next cycle
   date_cycle_next=$(get_date_from_cycle ${this_cycle} $STARTDATE $DT_ANA)
   date_cycle_next_std=$(print_time_dart $date_cycle_next)
   # For previous cycle
   date_cycle_prev=$(get_date_from_cycle $(( ${this_cycle} -2 )) $STARTDATE $DT_ANA)

   ### Get the associate Dart day
   # Dart reference is January 1st, 1601
   dart_ref_date=16010101 
   # jday = cumulative days from 1601.01.01
   day_zero=$(($(get_timediff_dates ${dart_ref_date} ${STARTDATE})-1))
   jday=$(( day_zero + $((($this_cycle+1)/$DT_ANA))))
   semi_period=$(($DT_OBS/2+1))

   ### Observations
   # Select the correct input observation files
   if (( (${this_cycle}-${NSTART_ANA})%${DT_OBS} == 0 )) ; then
      OBS_PREF=${OBS_PREF_2}
   else
      OBS_PREF=${OBS_PREF_1}
   fi
   obs_seq_in=${OBS_DIR}/${OBS_PREF}${date_cycle_next}
   # The output observation is called final
   obs_seq_out=${SCRATCHDIR}/Outputs/ObsOut/${OBS_PREF}final.${date_cycle_next}

   ### Other options
   # read grid info
   roms_restart_file=${SCRATCHDIR}/Outputs/Prior/m001/${SIMU}_rst_${date_cycle}.nc
   # list of restart files
   roms_list_priors=${SCRATCHDIR}/Tempfiles/list_priors_${date_cycle}.txt
   ls ${SCRATCHDIR}/Outputs/Prior/m*/${SIMU}_rst_${date_cycle}.nc > ${roms_list_priors}
   # list of analysis files
   roms_list_ana=${SCRATCHDIR}/Tempfiles/list_analysis_${date_cycle}.txt
   cat ${roms_list_priors} | sed -e "s;Prior;Reanalysis;g" \
                                 -e "s;_rst_;_rstana_;g"   > ${roms_list_ana}

   # Create the temporary namelist 
   cat ${SCRATCHDIR}/input_${SIMU}.nml  | sed -e "s;<DTANA_OBS>;${DT_OBS};g" \
                                              -e "s;<PRIORLIST>;${roms_list_priors};g" \
                                              -e "s;<ANALIST>;${roms_list_ana};g" \
                                              -e "s;<GRIDNAME>;${GRIDFILE};g" \
                                              -e "s;<ROMSRSTNAME>;${roms_rst_file};g" \
                                              -e "s;<MDTFILENAME>;${MDT_FILE};g" \
                                              -e "s;<NMEMBERS>;${NMEMBERS};g" \
                                              -e "s;<OBSINFILE>;${obs_seq_in};g" \
                                              -e "s;<OBSOUTFILE>;${obs_seq_out};g" \
                                              -e "s;<TASKPERNODE>;${taskpernode};g" \
                                              -e "s;<FIRSTOBSDAY>;$(($jday-$semi_period));g" \
                                              -e "s;<LASTOBSDAY>;$(($jday+$semi_period));g" \
                                              -e "s;<DARTINITDAYS>;$jday;g" \
                                              -e "s;<INF_INI>;$INF_INI;g" \
                                              -e "s;<INF_SD_INI>;$INF_SD_INI;g" \
                                              -e "s;<DARTLOGOUT>;${SCRATCHDIR}/Logs/DART/dart_filt_c${disp_cycle}.out;g" \
                                              -e "s;<DARTLOGNML>;${SCRATCHDIR}/Logs/DART/dart_filt_c${disp_cycle}.nml;g" \
   > ${SCRATCHDIR}/input.nml.tmp

   # Inflation
   if [ "$INFLATION" = true ] ; then
      # Edit namelist
      cat ${SCRATCHDIR}/input.nml.tmp | sed -e "s;<INFLATION>;2;g" > ${SCRATCHDIR}/input.nml

      inf_file_mn=${SCRATCHDIR}/Outputs/Reanalysis/Inflation/Prior_inf_mean_${date_cycle_prev}.nc
      inf_file_sd=${SCRATCHDIR}/Outputs/Reanalysis/Inflation/Prior_inf_sd_${date_cycle_prev}.nc
      inf_file_mn_tmp=${SCRATCHDIR}/input_priorinf_mean.nc
      inf_file_sd_tmp=${SCRATCHDIR}/input_priorinf_sd.nc

      if (( $this_cycle == $NSTART_ANA )) ; then
         # For the first cycle, create the inflation file
         module load nco
         cp ${roms_rst_file} ${inf_file_mn_tmp}
         cp ${roms_rst_file} ${inf_file_sd_tmp}
         ncap2 -O -s "u=${INF_INI};v=${INF_INI};temp=${INF_INI};salt=${INF_INI};zeta=${INF_INI}" \
             ${inf_file_mn_tmp} ${inf_file_mn_tmp}
         ncap2 -O -s "u=${INF_SD_INI};v=${INF_SD_INI};temp=${INF_SD_INI};salt=${INF_SD_INI};zeta=${INF_SD_INI}" \
             ${inf_file_sd_tmp} ${inf_file_sd_tmp}
      else
         if [ "$( comp_files_md5sum ${inf_file_mn} ${inf_file_mn_tmp} )" == "true" ] ; then
            echo "Inflation file already there."
         else
            rsync -hav ${inf_file_mn} ${inf_file_mn_tmp}
            rsync -hav ${inf_file_sd} ${inf_file_sd_tmp}
         fi
      fi
   else
      # Edit namelist
      cat ${SCRATCHDIR}/input.nml.tmp | sed -e "s;<INFLATION>;0;g" > ${SCRATCHDIR}/input.nml 
   fi
   rm ${SCRATCHDIR}/input.nml.tmp

   # Dart need an existing reanalysis file (which is going to be overwritten)
   seq -f %03g 1 $NMEMBERS | parallel \
       "rsync -havz ${SCRATCHDIR}/Outputs/Prior/m{}/${SIMU}_rst_${date_cycle}.nc \
       ${SCRATCHDIR}/Outputs/Reanalysis/m{}/${SIMU}_rstana_${date_cycle}.nc"


#------------------------------------------------------------------------------------
# run the analysis
#------------------------------------------------------------------------------------
   
   # Run the Kalman filter
   ${RUN} ${SCRATCHDIR}/Exe/filter

   # Check if successful
   check=$( grep "Filter done" ${SCRATCHDIR}/Logs/DART/dart_filt_c${disp_cycle}.out )
   if [ -z $check ] ; then
      success=false
   else
      success=true
   fi

   # If successfully created restart files
   if [ "$success" = true ]; then
      # Move the diag outputs
      mv ${SCRATCHDIR}/preassim_mean.nc ${SCRATCHDIR}/Outputs/Diags/Prior_mean_${date_cycle}.nc
      mv ${SCRATCHDIR}/preassim_sd.nc   ${SCRATCHDIR}/Outputs/Diags/Prior_sd_${date_cycle}.nc
      mv ${SCRATCHDIR}/output_mean.nc   ${SCRATCHDIR}/Outputs/Diags/Analysis_mean_${date_cycle}.nc
      mv ${SCRATCHDIR}/output_sd.nc     ${SCRATCHDIR}/Outputs/Diags/Analysis_sd_${date_cycle}.nc
    
      # Copy the inflation files
      if [ "$INFLATION" = true ] ; then
         inf_file_mn=${SCRATCHDIR}/Outputs/Reanalysis/Inflation/Prior_inf_mean_${date_cycle}.nc
         inf_file_sd=${SCRATCHDIR}/Outputs/Reanalysis/Inflation/Prior_inf_sd_${date_cycle}.nc
         inf_file_mn_tmp=${SCRATCHDIR}/output_priorinf_mean.nc
         inf_file_sd_tmp=${SCRATCHDIR}/output_priorinf_sd.nc
         rsync -hav ${inf_file_mn_tmp} ${SCRATCHDIR}/Outputs/Reanalysis/Inflation/Prior_inf_mean_${date_cycle}.nc
         rsync -hav ${inf_file_sd_tmp} ${SCRATCHDIR}/Outputs/Reanalysis/Inflation/Prior_inf_sd_${date_cycle}.nc
      fi
   fi

else

#------------------------------------------------------------------------------------
# If no analysis, just copy the prior into the reanalysis directory
#------------------------------------------------------------------------------------

   # Get the current date
   date_cycle=$(get_date_from_cycle $(( ${this_cycle} -1 )) ${STARTDATE} ${DT_ANA})

   module load parallel

   # Copy priors into reanalysis
   seq -f %03g 1 $NMEMBERS | parallel \
      "rsync -havz ${SCRATCHDIR}/Outputs/Prior/m{}/${SIMU}_rst_${date_cycle}.nc \
      ${SCRATCHDIR}/Outputs/Reanalysis/m{}/${SIMU}_rstana_${date_cycle}.nc"
   success=true
0   
fi


#------------------------------------------------------------------------------------
# if analysis successful, submit next cycle
#------------------------------------------------------------------------------------

if [ "$success" = true ] ; then

   # Do some cleanup
   if ((${this_cycle}>4)) && [ "$CLEANUP" = "true" ]; then
      cleandate=$(get_date_from_cycle $(( ${this_cycle}-4 )) $STARTDATE 1)
      next_date=$(get_date_from_cycle $(( ${this_cycle}-3 )) $STARTDATE 1)
      dday=$(str2num ${next_date:6:2})
      if (( dday == 1 )); then
         echo "No cleaning on last day of month: ${cleandate}"
      else
         echo "Cleaning up N-3 files. Cleaning day: ${cleandate}"
         # Directories
         dir_prior=${SCRATCHDIR}/Outputs/Prior/
         dir_analy=${SCRATCHDIR}/Outputs/Reanalysis/
         dir_filts=${SCRATCHDIR}/Outputs/Filtfiles/
         # Prefixes
         prefix_prior=${SIMU}_rst_
         prefix_analy=${SIMU}_rstana_
         # Loop on members
         if [ -f ${dir_analy}/m030/${prefix_analy}${cleandate}.nc ]; then
            seq -f %03g 1 $NMEMBERS | parallel "rm ${dir_prior}/m{}/${prefix_prior}${cleandate}.nc"
            seq -f %03g 1 $NMEMBERS | parallel "rm ${dir_analy}/m{}/${prefix_analy}${cleandate}.nc"
            seq -f %03g 1 $NMEMBERS | parallel "rm ${dir_filts}/m{}/ocean_fil*_01_${cleandate}.nc"
        fi
      fi
   fi
   echo "Assimilation cycle # $this_cycle successful"
   exit 0
else
   echo "Assimilation cycle # $this_cycle failed"
   exit 1
fi


