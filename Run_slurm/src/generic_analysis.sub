#!/bin/bash
<HEADER>

set -x

# Get parameters and useful functions
. <CURRENTDIR>/parameters
. <CURRENTDIR>/functions.sh

# Get values of cycle and job id
this_cycle=<CYCLE>
disp_cycle=<DISPCYCLE>
this_job_id=${SLURM_JOB_ID}

# Go to the root directory of the simulation (SCRATCHDIR)
cd ${SCRATCHDIR}

# Only apply filter after a few days (defined in parameter: NSTART_ANA)
if (( ${this_cycle} > $((${NSTART_ANA}-1)) )) ; then

#------------------------------------------------------------------------------------
# Specific options for triton computer
#------------------------------------------------------------------------------------

   # Number of processor per node
   if   [ '<TYPENODE>' == 'triton16' ] ; then
       taskpernode=16
   elif [ '<TYPENODE>' == 'triton24' ] ; then
       taskpernode=24
   else
       echo "Machine not supported"; exit 1
   fi
   
#------------------------------------------------------------------------------------
# Load the appropriate modules (from module-used)
#------------------------------------------------------------------------------------

   sed '1d' ${SCRATCHDIR}/modules-used > ${SCRATCHDIR}/Tempfiles/modules.dat
   list=$( cat ${SCRATCHDIR}/Tempfiles/modules.dat | sed -e "s/[0-9])//g" )
   module purge
   for mod in $list ; do
       module load $mod
   done
   rm ${SCRATCHDIR}/Tempfiles/modules.dat
   module load parallel

#------------------------------------------------------------------------------------
# Prepare the namelists
#------------------------------------------------------------------------------------

   ### Temporary directory
   Temp_dir=${SCRATCHDIR}/Outputs/Tmpdir/
   # Clean it before use
   rm ${Temp_dir}/*

   ### Get dates
   # for this cycle
   date_cycle=$(get_date_from_cycle ${this_cycle} $STARTDATE $DT_ANA)
   # For next cycle
   next_cycle=$(( this_cycle + 1 ))
   date_cycle_next=$(get_date_from_cycle ${next_cycle} $STARTDATE $DT_ANA)
   date_cycle_next_std=$(print_time_dart $date_cycle_next)

   ### Get the associate Dart day
   # Dart reference is January 1st, 1601
   dart_ref_date=16010101 
   # jday = cumulative days from 1601.01.01
   day_zero=$(($(get_timediff_dates ${dart_ref_date} ${STARTDATE})-1))
   jday=$(( day_zero + $(($next_cycle/$DT_ANA))))

   ### Observations
   # Select the correct input observation files
   obs_seq_in=${OBS_DIR}/${OBS_PREF}${date_cycle_next}
   # The output observation is called final
   obs_seq_out=${SCRATCHDIR}/Outputs/ObsOut/${OBS_PREF}final.${date_cycle_next}

   ### Other options
   # read grid info
   roms_restart_file=${SCRATCHDIR}/Outputs/Prior/m001/${SIMU}_rst_${date_cycle}.nc
   # Temporart dart files
   restart_in=${Temp_dir}/dart.ics
   restart_out=${Temp_dir}/dart.restart
   hc=$(get_param_from_nc ${GRIDFILE} hc) # ROMS critical depth

   # Create the temporary namelist 
   cat ${SCRATCHDIR}/input_${SIMU}.nml  | sed -e "s;<TIMEANA>;${date_cycle_next_std};g" \
                                              -e "s;<DTANA>;${DT_ANA};g" \
                                              -e "s;<HC>;${hc};g" \
                                              -e "s;<GRIDNAME>;${GRIDFILE};g" \
                                              -e "s;<NMEMBERS>;${NMEMBERS};g" \
                                              -e "s;<OBSINFILE>;${obs_seq_in};g" \
                                              -e "s;<OBSOUTFILE>;${obs_seq_out};g" \
                                              -e "s;<TASKPERNODE>;${taskpernode};g" \
                                              -e "s;<DARTRSTIN>;${restart_in};g" \
                                              -e "s;<DARTRSTOUT>;${restart_out};g" \
                                              -e "s;<FIRSTOBSDAY>;$(($jday-1));g" \
                                              -e "s;<LASTOBSDAY>;$(($jday+1));g" \
                                              -e "s;<DARTINITDAYS>;$jday;g" \
   > ${SCRATCHDIR}/input.nml.temp

#------------------------------------------------------------------------------------
# Convert all members ROMS files to DART files
#------------------------------------------------------------------------------------

   for kmem in $( seq 1 $NMEMBERS ) ; do
   
      # Dart files have 4 digits in their name, our directories only 3
      printf -v nnnn "%04d" $kmem
      printf -v nnn "%03d" $kmem
      
      roms_restart=${SCRATCHDIR}/Outputs/Prior/m${nnn}/${SIMU}_rst_${date_cycle}.nc
      dart_input=${Temp_dir}/dart.ics.${nnnn}
      
      # Create namelist for the roms2dart code
      cat ${SCRATCHDIR}/input.nml.temp  | sed -e "s;<DARTICSFILE>;${dart_input};g" \
                                              -e "s;<ROMSRSTNAME>;${roms_restart};g" \
                                              -e "s;<DARTLOGOUT>;${SCRATCHDIR}/Logs/DART/dart_r2d_c${disp_cycle}_m${nnn}.out;g" \
                                              -e "s;<DARTLOGNML>;${SCRATCHDIR}/Logs/DART/dart_r2d_c${disp_cycle}_m${nnn}.nml;g" \
      > ${SCRATCHDIR}/Tempfiles/m${nnn}/input.nml
   
   done

   # run DART Fortran program in parallel
   seq -f %03g 1 $NMEMBERS | parallel "cd ${SCRATCHDIR}/Tempfiles/m{}/;${SCRATCHDIR}/Exe/roms_to_dart"
   cd ${SCRATCHDIR}/
   
#------------------------------------------------------------------------------------
# run the analysis
#------------------------------------------------------------------------------------
   
   # Create namelist for the filter code
   cat ${SCRATCHDIR}/input.nml.temp | sed -e "s;<DARTLOGOUT>;${SCRATCHDIR}/Logs/DART/dart_filt_c${disp_cycle}.out;g" \
                                          -e "s;<DARTLOGNML>;${SCRATCHDIR}/Logs/DART/dart_filt_c${disp_cycle}.nml;g" \
                                          -e "s;<ROMSRSTNAME>;${roms_restart_file};g" \
   > ${SCRATCHDIR}/input.nml
   
   # Run the Kalman filter
   ${RUN} -n <NCORES> ${SCRATCHDIR}/Exe/filter
 

   # If successfully created restart files
   if [ -f ${Temp_dir}/dart.restart.0001 ]; then
      success=true
      # Copy the diag outputs
      mv ${SCRATCHDIR}/Prior_Diag.nc ${SCRATCHDIR}/Outputs/Diags/Prior_Diag_${date_cycle}.nc
      mv ${SCRATCHDIR}/Posterior_Diag.nc ${SCRATCHDIR}/Outputs/Diags/Posterior_Diag_${date_cycle}.nc
   else
      success=false
   fi 
 
#------------------------------------------------------------------------------------
# Convert all members DART files to ROMS files
#------------------------------------------------------------------------------------

   if [ "$success" = true ] ; then
 
      for kmem in $( seq 1 $NMEMBERS ) ; do
      
         # Dart files have 4 digits in their name, our directories only 3 
         printf -v nnn "%03d" $kmem
         printf -v nnnn "%04d" $kmem
         
         roms_restart=${SCRATCHDIR}/Outputs/Prior/m${nnn}/${SIMU}_rst_${date_cycle}.nc
         roms_reanaly=${SCRATCHDIR}/Outputs/Reanalysis/m${nnn}/${SIMU}_rstana_${date_cycle}.nc
         dart_output=${Temp_dir}/dart.restart.${nnnn}
         
         # Dart need an existing reanalysis file (which is going to be overwritten)
         rsync -havz $roms_restart  $roms_reanaly
   
         # Create namelist for the dart2roms code
         cat ${SCRATCHDIR}/input.nml.temp  | sed -e "s;<DARTRSTFILE>;${dart_output};g" \
                                                 -e "s;<ROMSRSTNAME>;${roms_reanaly};g" \
                                                 -e "s;<DARTLOGOUT>;${SCRATCHDIR}/Logs/DART/dart_d2r_c${disp_cycle}_m${nnn}.out;g" \
                                                 -e "s;<DARTLOGNML>;${SCRATCHDIR}/Logs/DART/dart_d2r_c${disp_cycle}_m${nnn}.nml;g" \
         > ${SCRATCHDIR}/Tempfiles/m${nnn}/input.nml
   
      done

      # run DART Fortran program in parallel
      seq -f %03g 1 $NMEMBERS | parallel "cd ${SCRATCHDIR}/Tempfiles/m{}/;${SCRATCHDIR}/Exe/dart_to_roms"
      cd ${SCRATCHDIR}/

   fi

else

#------------------------------------------------------------------------------------
# If no analysis, just copy the prior into the reanalysis directory
#------------------------------------------------------------------------------------

   # Get the current date
   date_cycle=$(get_date_from_cycle ${this_cycle} ${STARTDATE} ${DT_ANA})

   # Copy priors into reanalysis
   for kmem in $( seq 1 $NMEMBERS ) ; do

      printf -v nnn "%03d" $kmem
      roms_restart=${SCRATCHDIR}/Outputs/Prior/m${nnn}/${SIMU}_rst_${date_cycle}.nc
      roms_reanaly=${SCRATCHDIR}/Outputs/Reanalysis/m${nnn}/${SIMU}_rstana_${date_cycle}.nc
      rsync -havz ${roms_restart} ${roms_reanaly}

   done
   success=true
   
fi


#------------------------------------------------------------------------------------
# if analysis successful, submit next cycle
#------------------------------------------------------------------------------------

if [ "$success" = true ] ; then

   # Compress this cycle logs
   cd ${SCRATCHDIR}/Logs/
   tar -czf log_tmp.tar.gz *c${disp_cycle}*; rm ${SCRATCHDIR}/Logs/*c${disp_cycle}*; mv log_tmp.tar.gz ${SCRATCHDIR}/Logs/log_c${disp_cycle}.tar.gz
   cd ${SCRATCHDIR}/Logs/ROMS/
   tar -czf roms_log_c${disp_cycle}.tar.gz log.roms_fwd.c${disp_cycle}.m???; rm log.roms_fwd.c${disp_cycle}.m???
   cd ${SCRATCHDIR}/Logs/DART/
   tar -czf dart_log_c${disp_cycle}.tar.gz dart_*_c${disp_cycle}*
   rm ${SCRATCHDIR}/Logs/DART/dart_d2r_c${disp_cycle}*;rm ${SCRATCHDIR}/Logs/DART/dart_r2d_c${disp_cycle}*;rm ${SCRATCHDIR}/Logs/DART/dart_filt_c${disp_cycle}*
   
   nextcycle=$(( $this_cycle + 1 ))
   ssh node0 "cd ${SCRATCHDIR}/ ; ${SCRATCHDIR}/submit_cycle.sh $nextcycle >> ${SCRATCHDIR}/Logs/submit.log"
else 
   echo "Assimilation cycle # $this_cycle failed"
fi



