#!/bin/bash
#SBATCH -n <NCORES>
#SBATCH --time=3:00:00
#SBATCH -J analysis
#SBATCH --dependency=afterok<DEPLIST>
#SBATCH --error=<CURRENTDIR>/Logs/analysis_c<DISPCYCLE>.%J.err 
#SBATCH --output=<CURRENTDIR>/Logs/analysis_c<DISPCYCLE>.%J.out
#SBATCH -p <TYPENODE>

set -x

. <CURRENTDIR>/parameters
. <CURRENTDIR>/functions.sh

this_cycle=<CYCLE>
disp_cycle=<DISPCYCLE>
this_job_id=${SLURM_JOB_ID}

cd ${SCRATCHDIR}

if (( ${this_cycle} > $((${NSTART_ANA}-1)) )) ; then

#------------------------------------------------------------------------------------
# Specific options for triton computer
#------------------------------------------------------------------------------------

   if [ $TYPENODE == 'triton16' ] ; then
       taskpernode=16
   elif [ $TYPENODE == 'triton24' ] ; then
       taskpernode=24
   else
       echo "Machine not supported"; exit 1
   fi
   
#------------------------------------------------------------------------------------
# Load the appropriate modules (from module-used)
#------------------------------------------------------------------------------------

   sed '1d' ${SCRATCHDIR}/modules-used > ${SCRATCHDIR}/Tempfiles/modules.dat
   list=$( cat ${SCRATCHDIR}/Tempfiles/modules.dat | sed -e "s/[0-9])//g" )
   module purge
   for mod in $list ; do
       module load $mod
   done
   rm ${SCRATCHDIR}/Tempfiles/modules.dat

#------------------------------------------------------------------------------------
# Prepare the namelists
#------------------------------------------------------------------------------------

   # Temporary directory
   Temp_dir=${SCRATCHDIR}/Outputs/Tmpdir/
   rm ${Temp_dir}/*

   # Get date for this cycle
   date_cycle=$(get_date_from_cycle ${this_cycle} $STARTDATE $DT_ANA)
   prev_cycle=$(( this_cycle - 1 ))
   date_cycle_prev=$(get_date_from_cycle ${prev_cycle} $STARTDATE $DT_ANA)
   date_cycle_std=$(print_time_dart $date_cycle)

   # Get the associate Dart day
   dart_ref_date=16010101
   day_zero=$(($(get_timediff_dates ${dart_ref_date} ${STARTDATE})-1)) # jday = cumulative days from 1601.01.01
   jday=$(( day_zero + $(($this_cycle/$DT_ANA)) -1 )) # observations are taken from the day before

   # Select the correct observation files
   obs_seq_in=${DATADIR}/ObsData/SST/obsSEQ/obs_seq.sst1.${date_cycle_prev}
   # obs_seq_in=${DATADIR}/ObsData/SST/obs_seq_test
   obs_seq_out=${SCRATCHDIR}/Outputs/ObsOut/obs_seq.sst1.final.${date_cycle_prev}
   # obs_seq_out=${Temp_dir}/obs_seq_test.final

   # Other options
   roms_restart_file=${SCRATCHDIR}/Outputs/Prior/m001/${SIMU}_rst_${date_cycle}.nc  #read grid info
   restart_in=${Temp_dir}/dart.ics
   restart_out=${Temp_dir}/dart.restart
   hc=$(get_param_from_nc ${GRIDFILE} hc) # ROMS critical depth

   # Create the temporary namelist 
   cat ${SCRATCHDIR}/input_${SIMU}.nml  | sed -e "s;<TIMEANA>;${date_cycle_std};g" \
                                              -e "s;<DTANA>;${DT_ANA};g" \
                                              -e "s;<HC>;${hc};g" \
                                              -e "s;<GRIDNAME>;${GRIDFILE};g" \
                                              -e "s;<NMEMBERS>;${NMEMBERS};g" \
                                              -e "s;<OBSINFILE>;${obs_seq_in};g" \
                                              -e "s;<OBSOUTFILE>;${obs_seq_out};g" \
                                              -e "s;<TASKPERNODE>;${taskpernode};g" \
                                              -e "s;<DARTRSTIN>;${restart_in};g" \
                                              -e "s;<DARTRSTOUT>;${restart_out};g" \
                                              -e "s;<FIRSTOBSDAY>;$(($jday-3));g" \
                                              -e "s;<LASTOBSDAY>;$(($jday+3));g" \
                                              -e "s;<DARTINITDAYS>;$jday;g" \
   > ${SCRATCHDIR}/input.nml.temp

#------------------------------------------------------------------------------------
# Convert all members ROMS files to DART files
#------------------------------------------------------------------------------------

   for kmem in $( seq 1 $NMEMBERS ) ; do
   
      printf -v nnn "%03d" $kmem
      printf -v nnnn "%04d" $kmem
      
      roms_restart=${SCRATCHDIR}/Outputs/Prior/m${nnn}/${SIMU}_rst_${date_cycle}.nc
      dart_input=${Temp_dir}/dart.ics.${nnnn}
      
      # Create namelist for the roms2dart code
      cat ${SCRATCHDIR}/input.nml.temp  | sed -e "s;<DARTICSFILE>;${dart_input};g" \
                                              -e "s;<ROMSRSTNAME>;${roms_restart};g" \
                                              -e "s;<DARTLOGOUT>;${SCRATCHDIR}/Logs/DART/dart_r2d_c${disp_cycle}_m${nnn}.out;g" \
                                              -e "s;<DARTLOGNML>;${SCRATCHDIR}/Logs/DART/dart_r2d_c${disp_cycle}_m${nnn}.nml;g" \
      > ${SCRATCHDIR}/input.nml

      # run DART Fortran program
      ${SCRATCHDIR}/Exe/roms_to_dart
   
   done


#------------------------------------------------------------------------------------
# run the analysis
#------------------------------------------------------------------------------------
   
   # Create namelist for the filter code
   cat ${SCRATCHDIR}/input.nml.temp | sed -e "s;<DARTLOGOUT>;${SCRATCHDIR}/Logs/DART/dart_filt_c${disp_cycle}.out;g" \
                                          -e "s;<DARTLOGNML>;${SCRATCHDIR}/Logs/DART/dart_filt_c${disp_cycle}.nml;g" \
                                          -e "s;<ROMSRSTNAME>;${roms_restart_file};g" \
   > ${SCRATCHDIR}/input.nml
   
   # Run the Kalman filter
   srun --cpu_bind=rank -n <NCORES> ${SCRATCHDIR}/Exe/filter
  
   # Copy the diag outputs
   mv ${SCRATCHDIR}/Prior_Diag.nc ${SCRATCHDIR}/Outputs/Diags/Prior_Diag_${date_cycle}.nc
   mv ${SCRATCHDIR}/Posterior_Diag.nc ${SCRATCHDIR}/Outputs/Diags/Posterior_Diag_${date_cycle}.nc

   success=1
 
#------------------------------------------------------------------------------------
# Convert all members DART files to ROMS files
#------------------------------------------------------------------------------------

   for kmem in $( seq 1 $NMEMBERS ) ; do
   
      printf -v nnn "%03d" $kmem
      printf -v nnnn "%04d" $kmem
      
      roms_restart=${SCRATCHDIR}/Outputs/Prior/m${nnn}/${SIMU}_rst_${date_cycle}.nc
      roms_reanaly=${SCRATCHDIR}/Outputs/Reanalysis/m${nnn}/${SIMU}_rstana_${date_cycle}.nc
      dart_output=${Temp_dir}/dart.restart.${nnnn}
      cp $roms_restart  $roms_reanaly

      # Create namelist for the dart2roms code
      cat ${SCRATCHDIR}/input.nml.temp  | sed -e "s;<DARTRSTFILE>;${dart_output};g" \
                                              -e "s;<ROMSRSTNAME>;${roms_reanaly};g" \
                                              -e "s;<DARTLOGOUT>;${SCRATCHDIR}/Logs/DART/dart_d2r_c${disp_cycle}_m${nnn}.out;g" \
                                              -e "s;<DARTLOGNML>;${SCRATCHDIR}/Logs/DART/dart_d2r_c${disp_cycle}_m${nnn}.nml;g" \
      > ${SCRATCHDIR}/input.nml

      # run a Fortran program
      ${SCRATCHDIR}/Exe/dart_to_roms
   
   done

else

#------------------------------------------------------------------------------------
# If no analysis, just copy the prior into the reanalysis directory
#------------------------------------------------------------------------------------

   date_cycle=$(get_date_from_cycle ${this_cycle} ${STARTDATE} ${DT_ANA})

   for kmem in $( seq 1 $NMEMBERS ) ; do

      printf -v nnn "%03d" $kmem
      roms_restart=${SCRATCHDIR}/Outputs/Prior/m${nnn}/${SIMU}_rst_${date_cycle}.nc
      roms_reanaly=${SCRATCHDIR}/Outputs/Reanalysis/m${nnn}/${SIMU}_rstana_${date_cycle}.nc
      cp ${roms_restart} ${roms_reanaly}

   done
   success=1
   
fi


#------------------------------------------------------------------------------------
# if analysis successful, submit next cycle
#------------------------------------------------------------------------------------

if [ $success == 1 ] ; then
   nextcycle=$(( $this_cycle + 1 ))
   ssh node0 "cd ${SCRATCHDIR}/ ; ${SCRATCHDIR}/submit_cycle.sh $nextcycle >> ${SCRATCHDIR}/Logs/submit.log"
else 
   echo "Assimilation cycle # $this_cycle failed"
fi



