#!/bin/bash
#SBATCH -n <NCORES>
#SBATCH --time=0:30:00
#SBATCH -J analysis
#SBATCH --dependency=afterok<DEPLIST>
#SBATCH --error=<CURRENTDIR>/Logs/analysis.%J.err 
#SBATCH --output=<CURRENTDIR>/Logs/analysis.%J.out
#SBATCH -p <TYPENODE>

set -x

. <CURRENTDIR>/parameters
. <CURRENTDIR>/functions.sh

this_cycle=<CYCLE>
this_job_id=${SLURM_JOB_ID}

cd ${SCRATCHDIR}

if (( ${this_cycle} > $((${NSTART_ANA}-1)) )) ; then

   if [ $TYPENODE == 'triton16' ] ; then
       taskpernode=16
   elif [ $TYPENODE == 'triton24' ] ; then
       taskpernode=24
   else
       echo "Machine not supported"; exit 1
   fi
   
#------------------------------------------------------------------------------------
# Load the appropriate modules
#------------------------------------------------------------------------------------

   sed '1d' ${SCRATCHDIR}/modules-used > ${SCRATCHDIR}/Tempfiles/modules.dat
   list=$( cat ${SCRATCHDIR}/Tempfiles/modules.dat | sed -e "s/[0-9])//g" )
   module purge
   for mod in $list ; do
       module load $mod
   done
   rm ${SCRATCHDIR}/Tempfiles/modules.dat


#------------------------------------------------------------------------------------
# Convert all members ROMS files to DART files
#------------------------------------------------------------------------------------

   # Get date for this cycle
   date_cycle=$(get_date_from_cycle ${this_cycle} $STARTDATE $DT_ANA)
   date_cycle_std=$(print_time_dart $date_cycle)
   HC=$(get_param_from_nc ${GRIDFILE} hc)
   NX=$(get_ndim_from_nc ${GRIDFILE} xi_rho)
   NY=$(get_ndim_from_nc ${GRIDFILE} eta_rho)
   NZ=$(get_ndim_from_nc ${GRIDFILE} s_rho)
   

   for kmem in $( seq 1 $NMEMBERS ) ; do
   
      printf -v nnn "%03d" $kmem
      printf -v nnnn "%04d" $kmem
      
      roms_restart=${SCRATCHDIR}/Outputs/Prior/m${nnn}/${SIMU}_rst_${date_cycle}.nc
      dart_output=${SCRATCHDIR}/Outputs/Tmpdir/dart.ics.${nnnn}
      analysistime=$(get_param_from_nc $roms_restart ocean_time)
      echo $roms_restart $dart_output $analysistime
      
      # Create namelist for the roms2dart code
      cat ${SCRATCHDIR}/input.nml.roms_to_dart_default  | sed -e "s;<DARTICSFILE>;${dart_output};g" \
                                                    -e "s;<TIMEANA>;${date_cycle_std};g" \
                                                    -e "s;<DTANA>;${DT_ANA};g" \
                                                    -e "s;<NX>;$NX;g" \
                                                    -e "s;<NY>;$NY;g" \
                                                    -e "s;<NZ>;$NZ;g" \
                                                    -e "s;<HC>;${HC};g" \
                                                    -e "s;<ROMSRSTNAME>;${roms_restart};g" \
                                                    -e "s;<GRIDNAME>;${GRIDFILE};g" \
                                                    -e "s;<DARTLOGOUT>;${SCRATCHDIR}/Logs/dart_r2d_${this_cycle}_${nnn}.out;g" \
                                                    -e "s;<DARTLOGNML>;${SCRATCHDIR}/Logs/dart_r2d_${this_cycle}_${nnn}.nml;g" \
   > ${SCRATCHDIR}/input.nml.roms2dart
   cp ${SCRATCHDIR}/input.nml.roms2dart ${SCRATCHDIR}/input.nml
#      cat ${SCRATCHDIR}/input.nml.template.r2d | sed -e "s;<MODEL_RESTART_FILENAME>;$roms_restart;g" \
#                                                     -e "s;<DART_OUTPUT_FILENAME>;$dart_output;g" \
#                                                     -e "s;<GRID_FILENAME>;$grid_file;g" > ${SCRATCHDIR}/input.nml.tmp.r2d	
#      cp ${SCRATCHDIR}/input.nml.tmp.r2d ${SCRATCHDIR}/input.nml
      # run DART Fortran program
      ${SCRATCHDIR}/Exe/roms_to_dart
      # $roms_restart Please do not remove restart files	
   
   done

exit 1


#------------------------------------------------------------------------------------
# run the analysis
#------------------------------------------------------------------------------------
   
   # Prepare the namelist
   day_zero=149748
   jday=$(( day_zero + $(($this_cycle/$DT_ANA)) )) # jday = cumulative days from 1601.01.01
   obs_seq_in=${DATADIR}/ObsData/MERGEDobsSEQ/obs_seq.sst1_gtspp${date_cycle}
   obs_seq_out=${SCRATCHDIR}/Outputs/Tmpdir/obs_seq.final${date_cycle}
   restart_in=${SCRATCHDIR}/Outputs/Tmpdir/dart.ics
   restart_out=${SCRATCHDIR}/Outputs/Tmpdir/dart.restart
   roms_restart_file=${SCRATCHDIR}/Outputs/Prior/m001/${SIMU}_rst_${date_cycle}.nc  #read grid info
   grid_file=${DATADIR}/Inputs/Grid/NWA_grd.nc
   
   cat ${SCRATCHDIR}/input.nml.filter_default | sed -e "s;<NMEMBER>;$NMEMBERS;g" \
                                                    -e "s;<TASKPERNODE>;${taskpernode};g" \
                                                    -e "s;<OBSINFILE>;$obs_seq_in;g" \
                                                    -e "s;<OBSOUTFILE>;$obs_seq_out;g" \
                                                    -e "s;<DARTRSTIN>;$restart_in;g" \
                                                    -e "s;<DARTRSTOUT>;$restart_out;g" \
                                                    -e "s;<DARTINITDAYS>;$jday;g" \
                                                    -e "s;<FIRSTOBSDAY>;$(($jday-3));g" \
                                                    -e "s;<LASTOBSDAY>;$(($jday+3));g" \
                                                    -e "s;<TIMEANA>;${date_cycle_std};g" \
                                                    -e "s;<DTANA>;${DT_ANA};g" \
                                                    -e "s;<NX>;$NX;g" \
                                                    -e "s;<NY>;$NY;g" \
                                                    -e "s;<NZ>;$NZ;g" \
                                                    -e "s;<HC>;${HC};g" \
                                                    -e "s;<ROMSRSTNAME>;${roms_restart_file};g" \
                                                    -e "s;<GRIDNAME>;$grid_file;g" \
                                                    -e "s;<DARTLOGOUT>;${SCRATCHDIR}/Logs/dart_filt_${this_cycle}.out;g" \
                                                    -e "s;<DARTLOGNML>;${SCRATCHDIR}/Logs/dart_filt_${this_cycle}.nml;g" \
   > ${SCRATCHDIR}/input.nml.filter
   
   cp ${SCRATCHDIR}/input.nml.filter ${SCRATCHDIR}/input.nml
   
   # Run the Kalman filter
   srun --cpu_bind=rank -n <NCORES> ${SCRATCHDIR}/Exe/filter
   

#------------------------------------------------------------------------------------
# Convert all members DART files to ROMS files
#------------------------------------------------------------------------------------

   for kmem in $( seq 1 $NMEMBERS ) ; do
   
      printf -v nnn "%03d" $kmem
      printf -v nnnn "%04d" $kmem
   
       roms_restart=${SCRATCHDIR}/Outputs/Prior/m${nnn}/${SIMU}_rst_${date_cycle}.nc
       roms_reanaly=${SCRATCHDIR}/Outputs/Reanalysis/m${nnn}/${SIMU}_rstana_${date_cycle}.nc
       dart_output=${SCRATCHDIR}/Outputs/Tmpdir/dart.restart.${nnnn}
       grid_file=${DATADIR}/Inputs/Grid/NWA_grd.nc
       analysistime=$( ncdump -v ocean_time $roms_restart | tail -2 | head -1 | awk '{print $4}' )
       echo $roms_restart $dart_output $analysistime
   
       cp $roms_restart $roms_reanaly
       cat ${SCRATCHDIR}/input.nml.dart_to_roms_default  | sed -e "s;<TIMEANA>;${date_cycle_std};g" \
                                                    -e "s;<DTANA>;${DT_ANA};g" \
                                                    -e "s;<NX>;$NX;g" \
                                                    -e "s;<NY>;$NY;g" \
                                                    -e "s;<NZ>;$NZ;g" \
                                                    -e "s;<HC>;${HC};g" \
                                                    -e "s;<DARTLOGOUT>;${SCRATCHDIR}/Logs/dart_d2r_${this_cycle}_${nnn}.out;g" \
                                                    -e "s;<DARTLOGNML>;${SCRATCHDIR}/Logs/dart_d2r_${this_cycle}_${nnn}.nml;g" \
                                                    -e "s;<ROMSRSTNAME>;${roms_restart_file};g" \
                                                    -e "s;<GRIDNAME>;$grid_file;g" \
       > ${SCRATCHDIR}/input.nml.dart2roms

#       cat ${SCRATCHDIR}/input.nml.template.d2r | sed -e "s;<MODEL_RESTART_FILENAME>;$roms_reanaly;g" \
#                                                      -e "s;<DART_OUTPUT_FILENAME>;$dart_output;g" \
#                                                      -e "s;<GRID_FILENAME>;$grid_file;g" > ${SCRATCHDIR}/input.nml.tmp.d2r
#       cp ${SCRATCHDIR}/input.nml.tmp.d2r ${SCRATCHDIR}/Exe/input.nml
       cp ${SCRATCHDIR}/input.nml.dart2roms ${SCRATCHDIR}/input.nml
       # run a Fortran program
       ${SCRATCHDIR}/Exe/dart_to_roms
       # mv $dart_output ${dart_output}.old
   
   done

else

   date_cycle=$(get_date_from_cycle ${this_cycle} ${STARTDATE} ${DT_ANA})

    for kmem in $( seq 1 $NMEMBERS ) ; do

        printf -v nnn "%03d" $kmem
        roms_restart=${SCRATCHDIR}/Outputs/Prior/m${nnn}/${SIMU}_rst_${date_cycle}.nc
        roms_reanaly=${SCRATCHDIR}/Outputs/Reanalysis/m${nnn}/${SIMU}_rstana_${date_cycle}.nc
        cp ${roms_restart} ${roms_reanaly}

    done
   
fi

success=1

#------------------------------------------------------------------------------------
# if analysis successful, submit next cycle
#------------------------------------------------------------------------------------

if [ $success == 1 ] ; then
   nextcycle=$(( $this_cycle + 1 ))
   ssh node0 "cd ${SCRATCHDIR}/ ; ${SCRATCHDIR}/submit_cycle.sh $nextcycle >> ${SCRATCHDIR}/Logs/submit.log"
else 
   echo "Assimilation cycle # $this_cycle failed"
fi



