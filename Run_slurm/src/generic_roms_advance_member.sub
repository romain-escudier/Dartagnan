#!/bin/bash
#SBATCH -n <NCORES>
#SBATCH --time=3:00:00
#SBATCH -J roms_advance_<MEMBER>
#SBATCH --error=<CURRENTDIR>/Logs/roms_advance_c<CYCLE>_m<MEMBER>.%J.err 
#SBATCH --output=<CURRENTDIR>/Logs/roms_advance_c<CYCLE>_m<MEMBER>.%J.out
#SBATCH -p <TYPENODE>

set -x

. <CURRENTDIR>/parameters
. <CURRENTDIR>/functions.sh

this_member=<MEMBER>
this_cycle=<CYCLE>
this_job_id=${SLURM_JOB_ID}


#------------------------------------------------------------------------------------
# create all necessary inputs and namelists
#------------------------------------------------------------------------------------`

# Name of the ROMS namelist
NAMELIST=${SCRATCHDIR}/Roms_files/ocean_${SIMU}_m${this_member}.in

# Time periods
ntimeana=$(( ${DT_ANA}*86400/$DT )) # Number of steps between restart files
ntimeout=$(( ${DT_OUT}*86400/$DT )) # Number of steps between outputs files
time_end=$(( ${this_cycle} * ${ntimeana})) # Number of steps to reach before stopping
startday=$(get_timediff_dates ${REFDATE} ${STARTDATE}) # Starting date (in days since reference)
date_cycle=$(get_date_from_cycle ${this_cycle} ${STARTDATE} ${DT_ANA}) # Date of cycle YYYYMMDD
declare -i yyyy=${date_cycle:0:4} # Year of cycle

# Initial state for the model
if ((${this_cycle} == 1)) ; then
    initialfile=${SCRATCHDIR}/Outputs/Reanalysis/m${this_member}/${SIMU}_ini_${STARTDATE}.nc
    restart=0
else
    prev_cycle=$(( $this_cycle - 1 ))
    date_prev_cycle=$(get_date_from_cycle ${prev_cycle} ${STARTDATE} ${DT_ANA})
    initialfile=${SCRATCHDIR}/Outputs/Reanalysis/m${this_member}/${SIMU}_rstana_${date_prev_cycle}.nc
    restart=-1
fi

# Outputs of the simulation
restart_dir=${SCRATCHDIR}/Outputs/Prior/m${this_member}/
restartfile=${restart_dir}/${SIMU}_rst_${date_cycle}.nc
historyfile=${SCRATCHDIR}/Outputs/History/m${this_member}/${SIMU}_his_${date_cycle}.nc
averagefile=${SCRATCHDIR}/Outputs/Average/m${this_member}/${SIMU}_avg_${date_cycle}.nc

# Forcing directory
forcing_dir_mem=${FORCINGDIR}/m${this_member}/

# Create the namelist
cat <CURRENTDIR>/ocean_${SIMU}.in | sed -e "s;<DT>;$DT;g"                          \
                                        -e "s;<ITILE>;$ITILE;g"                    \
                                        -e "s;<JTILE>;$JTILE;g"                    \
                                        -e "s;<NSTEPS>;$time_end;g"                \
                                        -e "s;<NRESTART>;$ntimeana;g"              \
                                        -e "s;<RESTART>;$restart;g"             \
                                        -e "s;<NTIMEOUT>;$ntimeout;g"              \
                                        -e "s;<GRID>;$GRIDFILE;g"                  \
                                        -e "s;<STARTDAY>;$startday;g"              \
                                        -e "s;<REFDATE>;$REFDATE;g"                \
                                        -e "s;<CLMFILE>;$CLIMFILE;g"               \
                                        -e "s;<BRYFILE>;$BRYFILE;g"                \
                                        -e "s;<INIT>;$initialfile;g"               \
                                        -e "s;<RESTARTFILE>;$restartfile;g"        \
                                        -e "s;<HISTORYFILE>;$historyfile;g"        \
                                        -e "s;<AVERAGEFILE>;$averagefile;g"        \
                                        -e "s;<SSS_RESTORING_FILE>;$SSSREFILE;g"   \
                                        -e "s;<RUNOFF_FILE>;$RUNOFFILE;g"          \
                                        -e "s;<TIDES_FILE>;$TIDESFILE;g"           \
                                        -e "s;<FORCINGDIR>;$forcing_dir_mem;g"     \
                                        -e "s;<FORCINGPREF>;$FORCINGPREF;g"        \
                                        -e "s;<FORCINGSUFF>;$FORCINGSUFF;g"        \
                                        -e "s;<OUTPUTDIR>;${SCRATCHDIR}/Outputs/;g"\
                                        -e "s;<CONFCASE>;${SIMU};g"                \
                                        -e "s;<VARINFODIR>;${SCRATCHDIR};g"        \
                                        -e "s;<YYYY2>;$yyyy;g"                     \
                                        -e "s;<YYYY1>;$(($yyyy-1));g"              \
> ${NAMELIST}

# Go to temporary directory (because filtering files are created in current directory)
mkdir -p ${SCRATCHDIR}/Tempfiles/m${this_member}/
cd ${SCRATCHDIR}/Tempfiles/m${this_member}/

#------------------------------------------------------------------------------------
# reload modules used when compiling
#------------------------------------------------------------------------------------

sed '1d' <CURRENTDIR>/modules-used > ${SCRATCHDIR}/Tempfiles/m${this_member}/modules.dat
list=$( cat ${SCRATCHDIR}/Tempfiles/m${this_member}/modules.dat | sed -e "s/[0-9])//g" )

module purge

for mod in $list ; do
    module load $mod
done

rm ${SCRATCHDIR}/Tempfiles/m${this_member}/modules.dat


#------------------------------------------------------------------------------------
# run the code
#------------------------------------------------------------------------------------


# srun --cpu_bind=rank -n <NCORES> <CURRENTDIR>/Exe/oceanM ${NAMELIST} <CURRENTDIR>/Logs/log.roms_fwd.m${this_member}

# for testing only
 sleep 1
#  exit 0

#------------------------------------------------------------------------------------
# check if the run finished OK
#------------------------------------------------------------------------------------

#  check1=$( grep Blowing-up <CURRENTDIR>/Logs/log.roms_fwd.m${this_member} )
#  
#  if [ -z $check1 ] ; then
#     echo "run for member $this_member did not blow up... continue..."
#  else
#     echo "run for member $this_member blew up... stopping..."
#     echo "analysis step will be held pending forever, please scancel it"
#     exit 1
#  fi
#  
#  check2=$( grep DONE <CURRENTDIR>/Logs/log.roms_fwd.m${this_member} | tail -1 | awk '{ print $2 }' )
#  
#  if [ ! -z $check2 ] ; then
#     echo "run for member $this_member finished OK... continue..."
#  else
#     echo "run for member $this_member did not finish... stopping..."
#     echo "analysis step will be held pending forever, please scancel it"
#     exit 1
#  fi

